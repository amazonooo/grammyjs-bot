require('dotenv').config()
const {
	Bot,
	GrammyError,
	HttpError,
	Keyboard,
	InlineKeyboard,
  session,
  MemorySessionStorage,
} = require('grammy')
const { hydrate } = require('@grammyjs/hydrate')

const { google } = require('googleapis')
const { JWT } = require('google-auth-library')

const auth = new JWT({
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL, // e-mail —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'), // –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ JSON
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({ version: 'v4', auth });

const spreadsheetId = '1pTBFi7KMRoVJ-1esqWGw66qMuTBUgSd4ZvotsA7mMB4'
const range = '–õ–∏—Å—Ç1!A:F'

const bot = new Bot(process.env.BOT_API_KEY)
bot.use(hydrate())

bot.use(session({ initial: () => ({}), storage: new MemorySessionStorage() }))

const adminId = 737315024

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
	},
	{
		command: 'admin_panel',
		description: '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
	},
])

bot.command('start', async (ctx) => {
  ctx.session = {}
  const inlineKeyboard = new InlineKeyboard().text('–ú—É–∂—Å–∫–æ–π', 'male').text('–ñ–µ–Ω—Å–∫–∏–π', 'female')
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', {
    reply_markup: inlineKeyboard
  })
})

bot.command('admin_panel', async ctx => {
	if (ctx.from.id !== adminId) {
		return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
	}

	return sendAdminPanel(ctx)
})

async function sendAdminPanel(ctx) {
	const keyboard = new InlineKeyboard()
		.text('üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', 'view_surveys')
		.row()
		.text('üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'export_data')
		.row()
		.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'view_stats')

	await ctx.reply('üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
		reply_markup: keyboard,
	})
}

bot.callbackQuery('back_to_admin', async ctx => {
	await ctx.editMessageText('üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
		reply_markup: new InlineKeyboard()
			.text('üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', 'view_surveys')
			.row()
			.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'view_stats'),
	})
})

bot.callbackQuery("view_surveys", async (ctx) => {
  if (ctx.from.id !==  adminId) {
    return ctx.answerCallbackQuery("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.");
  }

  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      return ctx.editMessageText("üì≠ –ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.", {
        reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "back_to_admin"),
      });
    }

    let message = "üìã –ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
    rows.forEach((row, index) => {
      message += `\nüÜî #${index + 1}\nüë§ –ü–æ–ª: ${row[0]}\nüíº –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${row[1]}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${row[2]}\nüìÖ –û–ø—ã—Ç: ${row[3]}\nüí∞ –î–æ—Ö–æ–¥: ${row[4]}\nüí∏ –ñ–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${row[5]}\n`;
    });

    await ctx.editMessageText(message, {
			reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'back_to_admin'),
		})
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç.', {
			reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'back_to_admin'),
		})
  }
});

// const fs = require("fs");
// const { parse } = require("json2csv");

// bot.callbackQuery("export_data", async (ctx) => {
//   if (ctx.from.id !== adminId) {
//     return ctx.answerCallbackQuery("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.");
//   }

//   try {
//     const response = await sheets.spreadsheets.values.get({
//       spreadsheetId,
//       range,
//     });

//     const rows = response.data.values;
//     if (!rows || rows.length === 0) {
//       return ctx.reply("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", {
//         reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "back_to_admin"),
//       });
//     }

//     const csv = parse(rows, { header: false });
//     fs.writeFileSync("users.csv", csv);

//     await ctx.replyWithDocument({
//       source: "users.csv",
//       filename: "users.csv",
//     });

//     fs.unlinkSync("users.csv");

//     await ctx.reply("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.", {
//       reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "back_to_admin"),
//     });
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV:", err);
//     await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.", {
//       reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "back_to_admin"),
//     });
//   }
// });

bot.callbackQuery("view_stats", async (ctx) => {
  if (ctx.from.id !== adminId) {
    return ctx.answerCallbackQuery("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.");
  }

  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const userCount = response.data.values ? response.data.values.length : 0;
    await ctx.editMessageText(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`, {
      reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "back_to_admin"),
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
    await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
			reply_markup: new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'back_to_admin'),
		})
  }
});

bot.callbackQuery(['male', 'female'], async (ctx) => {
  ctx.session.gender = ctx.callbackQuery.data
  const inlineKeyboard = new InlineKeyboard().text('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'dev').text('–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'marketing').text('–ü—Ä–æ–¥–∞–∂–∏', 'sales')
  await ctx.reply('–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery(['dev', 'marketing', 'sales'], async (ctx) => {
  ctx.session.occupation = ctx.callbackQuery.data
  const inlineKeyboard = new InlineKeyboard().text('14-18', '14-18').text('19-21', '19-21').text('22-25', '22-25').text('25+', '25+')
  await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:', {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery(['14-18', '19-21', '22-25', '25+'], async (ctx) => {
  ctx.session.age = ctx.callbackQuery.data
  const inlineKeyboard = new InlineKeyboard().text('–ú–µ–Ω—å—à–µ 1 –≥–æ–¥–∞', '<1').text('1 –≥–æ–¥', '1-year').text('2-4 –≥–æ–¥–∞', '2-4').text('5+', '5+')
  await ctx.reply('–¢–≤–æ–π –æ–ø—ã—Ç:', {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery(['<1', '1-year', '2-4', '5+'], async (ctx) => {
  ctx.session.experience = ctx.callbackQuery.data
  const inlineKeyboard = new InlineKeyboard()
		.text('0-30.000‚ÇΩ', '30k')
		.row()
		.text('30.000‚ÇΩ-60.000‚ÇΩ', '30-60k')
		.row()
		.text('120.000‚ÇΩ-180.000‚ÇΩ', '120-180k')
		.row()
		.text('180.000‚ÇΩ', '180k')
  await ctx.reply('–¢–≤–æ–π –¥–æ—Ö–æ–¥:', {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery(['30k', '30-60k', '120-180k', '180k'], async (ctx) => {
  ctx.session.current_income = ctx.callbackQuery.data
  const inlineKeyboard = new InlineKeyboard()
		.text('50.000‚ÇΩ+', '50k')
		.row()
		.text('100.000‚ÇΩ+', '100k')
		.row()
		.text('200.000‚ÇΩ+', '200k')
		.row()
		.text('300.000‚ÇΩ+', '300k')
  await ctx.reply('–ù–∞ –∫–∞–∫–æ–π –¥–æ—Ö–æ–¥ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏?:', {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

async function saveToSheet(data) {
	const values = [
		[
			data.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π',
			occupationMap[data.occupation] || data.occupation,
			data.age,
			experienceMap[data.experience] || data.experience,
			incomeMap[data.current_income] || data.current_income,
			desiredMap[data.desired_income] || data.desired_income,
		],
	]

	const resource = {
		values,
	}

	try {
		await sheets.spreadsheets.values.append({
			spreadsheetId,
			range,
			valueInputOption: 'RAW',
			resource,
		})
		console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets')
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err)
	}
}

const experienceMap = {
	'<1': '–ú–µ–Ω—å—à–µ 1 –≥–æ–¥–∞',
	'1-year': '1 –≥–æ–¥',
	'2-4': '2-4 –≥–æ–¥–∞',
	'5+': '5+ –ª–µ—Ç',
}

const occupationMap = {
	dev: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
	marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
	sales: '–ü—Ä–æ–¥–∞–∂–∏',
}

const incomeMap = {
	'30k': '0-30.000‚ÇΩ',
	'30-60k': '30.000‚ÇΩ-60.000‚ÇΩ',
	'120-180k': '120.000‚ÇΩ-180.000‚ÇΩ',
	'180k': '180.000‚ÇΩ+',
}

const desiredMap = {
	'50k': '50.000‚ÇΩ+',
	'100k': '100.000‚ÇΩ+',
	'200k': '200.000‚ÇΩ+',
	'300k': '300.000‚ÇΩ+',
}

bot.callbackQuery(["50k", "100k", "200k", "300k"], async (ctx) => {
	ctx.session.desired_income = ctx.callbackQuery.data;

  await saveToSheet({
    gender: ctx.session.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π',
    occupation: ctx.session.occupation,
    age: ctx.session.age,
    experience: ctx.session.experience,
    current_income: ctx.session.current_income,
    desired_income: ctx.session.desired_income,
  })

	await ctx.reply(
		`üìã *–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞:*\n
üë§ –ü–æ–ª: ${ctx.session.gender === "male" ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π"}
üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${ctx.session.occupation}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.age}
üìÖ –û–ø—ã—Ç: ${ctx.session.experience}
üí∞ –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥: ${ctx.session.current_income}
üí∏ –ñ–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${ctx.session.desired_income}`,
		{ parse_mode: "Markdown" }
	);

	await ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.", {
		reply_markup: new InlineKeyboard().text("üìö –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫", "lesson"),
	});

  await ctx.react('üëÄ')

	await ctx.answerCallbackQuery();
});

bot.start()